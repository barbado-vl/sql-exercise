!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!ВАЖНО!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

Не ожидать float или decimal, когда делишь int на int. Тип результата будет определяться "приоритетом типов" участников. Если целочисленный аргумент dividend делится на целочисленный аргумент divisor, то результатом будет целое число, а дробная часть будет усечена.


_________________________________________________________________________________________________________________________ ROUND / ::float / CAST
Тимми должен отобразить каждую уникальную работу, общую среднюю зарплату, общее количество людей и общую зарплату и упорядочить по самой высокой средней зарплате. У Тимми есть несколько ошибок в запросе, помогите Тимми исправить его запрос, чтобы он мог сохранить свою работу!


SELECT 
  j.job_title,
  (ROUND( SUM(j.salary) / COUNT(j.people_id), 2))::float as average_salary,
  COUNT(j.people_id) as total_people,
  (ROUND( SUM(j.salary), 2))::float as total_salary
  FROM job j
  GROUP BY j.job_title
  ORDER BY average_salary DESC

SELECT 
  j.job_title,
  CAST(ROUND(SUM(j.salary) / COUNT(p), 2) as FLOAT) as average_salary,
  COUNT(p.id) as total_people,
  CAST(ROUND(SUM(j.salary), 2) as FLOAT) as total_salary
FROM people p
  JOIN job j 
  ON p.id = j.people_id
  GROUP BY j.job_title
  ORDER BY average_salary DESC

________________________________________________________________________________________________________ SQRT / CUBE / LOG10 / LN

Given the following table 'decimals': ** decimals table schema **, id, number1, number2.
Return a table with two columns (root, log) where the values in root are the square root of those provided in number1 and the values in log are changed to a base 10 logarithm from those in number2.

Решение -- 
SELECT
  SQRT(number1) AS root,    -- вычесляет квадратный корень
  LOG10(number2) AS log     -- вычесляет десятичный логарифм
FROM  decimals;
-----------------------------------------------------------------
SELECT
  CBRT(number1) AS cuberoot,    -- function in posgresql gets the cube root value
  LN(number2) AS logarithm     -- возвращает натуральный логарифм (с основанием e) 
FROM  decimals;



________________________________________________________________________________________________________  MOD / MIN / MAX

This function should test if the factor is a factor of base. Return true if it is a factor or false if it is not. About factors
     Factors are numbers you can multiply together to get another number.
     2 and 3 are factors of 6 because: 2 * 3 = 6
     You can find a factor by dividing numbers. If the remainder is 0 then the number is a factor.
     You can use the mod operator (%) in most languages to check for a remainder
     For example 2 is not a factor of 7 because: 7 % 2 = 1
     Note: base is a non-negative number, factor is a positive number.
You will be given a table 'kata' with columns 'id', 'base', and 'factor'. 
Return the 'id' and your result in a column named 'res'.


Решение -- авто-функция
select id, base % factor = 0 as res from kata


Решение -- функция MOD -- возвращает остаток операции dividend / divisor.
SELECT id, MOD(base, factor) = 0 AS res FROM kata;
-----------------------------------------------------------------------------------------------

Решение -- MOD, MIN (возвращает минимальное значение выражения. За функцией может следовать предложение OVER), MAX
SELECT
    CASE WHEN MOD(SUM(number1), 2) > 0 THEN MIN(number1) ELSE MAX(number1) END AS number1,
    CASE WHEN MOD(SUM(number2), 2) > 0 THEN MIN(number2) ELSE MAX(number2) END AS number2
FROM numbers AS output;

_______________________________________________________________________________________________________________  GREATEST

Your classmates asked you to copy some paperwork for them. You know that there are 'n' classmates and the paperwork has 'm' pages.
Your task is to calculate how many blank pages do you need. If n < 0 or m < 0 return 0. Example: n= 5, m=5: 25; n=-5, m=5:  0.
Write your SQL statement here: you are given a table 'paperwork' with columns 'id', n' and 'm', return a table with columns 'n', 'm' and your result in a column named 'res'.

Решение -- функция GREATEST функция возвращает максимальное значение из списка, содержащего одно или несколько выражений
SELECT n, m, GREATEST(n, 0) * GREATEST(m, 0) AS res FROM paperwork;

--------------------------------------------------------------------------------------------------------------

Given three integers a ,b ,c, return the largest number obtained after inserting the following operators and brackets: +, *, ()
The numbers are always positive.
The numbers are in the range (1  ≤  a, b, c  ≤  10).
You can use the same operation more than once.
It's not necessary to place all the signs and brackets.
Repetition in numbers may occur .
You cannot swap the operands. For instance, in the given example you cannot get expression (1 + 3) * 2 = 8.

Решение -- функция GREATEST
SELECT GREATEST( a+b+c, (a+b)*c, a*(b+c), a*b*c ) 
AS res FROM expression_matter;
_______________________________________________________________________________________________________________________CEILING / СEIL

The first century spans from the year 1 up to and including the year 100, the second century - from the year 101 up to and including the year 200, etc.
Task. Given a year, return the century it is in. Examples: 1705 --> 18; 1900 --> 19; 1601 --> 17; 2000 --> 20.
In SQL, you will be given a table years with a column yr for the year. Return a table with a column century.

Решение
SELECT CEILING(yr/100.00) AS Century
FROM years

Решение -- функция CEIL возвращает наименьшее число не меньше expr с округлением до targetScale цифр после запятой: ceil(expr [, targetScale]))
           В большую сторону???
SELECT CEIL(yr::float/100) AS century FROM years;

----------------------------------------------------------------------------------------------------------------------
Каждый день растение растет на метры upSpeed. Каждую ночь высота этого растения уменьшается на метры downSpeed из-за недостатка солнечного тепла. Изначально растение имеет высоту 0 метров. Мы сажаем семена в начале дня. Мы хотим знать, когда высота растения достигнет определенного уровня.

SELECT id, 
  CASE WHEN desired_height <= up_speed THEN 1
  ELSE CEIL((desired_height - up_speed)::decimal / (up_speed - down_speed))::int + 1 END AS num_days
FROM growing_plant;

___________________________________________________________________________________________________________________________ POWER

Решение -- POWER -- возвращает значение указанного выражения, возведенное в заданную степень.
SELECT POWER(number1, number2) AS result FROM decimals

Решение
SELECT (number1 ^ number2) AS result 
FROM decimals;
___________________________________________________________________________________________________________________________ TRUNC
Учитывая следующую таблицу «десятичные числа». Возвращает таблицу с одним столбцом в сторону нуля, где значения являются результатом числа1 + числа2, усеченного в сторону нуля.

Решение -- TRUNC -- округляет число до определенного знака, но не по правилам математического округления, а просто отбрасывая лишние знаки.
SELECT TRUNC(number1+number2) as towardzero
FROM decimals;
